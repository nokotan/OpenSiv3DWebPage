msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=; plural=;\n"

msgid ""
"---\n"
"# Feel free to add content and custom Front Matter to this file.\n"
"# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme"
"-defaults"
msgstr ""

msgid ""
"title: Web Specific Notes\n"
"permalink: /v0.4.3/web-specific-notes\n"
"---"
msgstr ""

msgid ""
"> This page is targeted who uses the previous version of OpenSiv3D for Web and"
" no longer maintained.\n"
"{:.warn}"
msgstr ""

msgid "## GameLoop Design"
msgstr ""

msgid ""
"**Let a browser handle JavaScript events**, or the browser hangs up because of"
" infinite loop.\n"
"Therefore, **make a function that includes logics that should be processed reg"
"ularly**,\n"
"and **register the function as a callback** which is called at the start of an"
" animation frame."
msgstr ""

msgid ""
"```cpp\n"
"# include <Siv3D.hpp>"
msgstr ""

msgid ""
"void Main()\n"
"{\n"
"  // initializations here..."
msgstr ""

msgid ""
"  Platform::Web::System::SetMainLoop([&]()\n"
"  {\n"
"    System::Update();\n"
"    // more tasks on each frames..\n"
"  });\n"
"}\n"
"```"
msgstr ""

msgid "## File Systems"
msgstr ""

msgid "Your WebGL apps **cannot access any files on users' file system**."
msgstr ""

msgid ""
"Those files required on running your WebGL apps, **can be bundled on building*"
"* with emcc's `--preload` option.\n"
"These bundled files are loaded into a virtual file system; then you can access"
" these files on ordinal way."
msgstr ""

msgid "## Supported Features"
msgstr ""

msgid ""
"With \"OpenSiv3D for Web,\" you can use the almost features which is supported i"
"n OpenSiv3D for Linux.\n"
"For details, check out [Implementation Status](/status)"
msgstr ""

msgid "## Features that Differs Other Platforms"
msgstr ""

msgid "### Audio Decoding"
msgstr ""

msgid ""
"Decoding .mp3 and .aac with Audio constructor is not supported.\n"
"Use `s3d::Platforms::Web::AudioProcessing::DecodeAudioFromFile` that returns `"
"std::future<Audio>`."
msgstr ""

msgid ""
"```cpp\n"
"  // \n"
"  // Not supported in Web.\n"
"  //\n"
"  // Audio audio { \"/example/test.mp3\" };\n"
"  Audio audio;\n"
"  std::future<Audio> audio_future = s3d::Platforms::Web::AudioProcessing::Deco"
"deAudioFromFile(\"/example/test.mp3\");"
msgstr ""

msgid ""
"  // check if audio decoding has been finished\n"
"  if (audio_future.valid() && audio_future.wait_for(0s) == std::future_status:"
":ready)\n"
"  {\n"
"    audio = audio_future.get();\n"
"  }\n"
"```"
msgstr ""

msgid "### File Open Dialog"
msgstr ""

msgid ""
"`s3d::Dialog::Open**` will always return empty object.\n"
"Use `s3d::Platforms::Web::Dialog::Open**` that returns `std::future<**>`."
msgstr ""

msgid ""
"```cpp\n"
"  // \n"
"  // Not supported in Web.\n"
"  //\n"
"  // Audio audio = Dialog::OpenAudio();\n"
"  Audio audio;\n"
"  std::future<Audio> audio_future = s3d::Platforms::Web::Dialog::OpenAudio();"
msgstr ""

msgid ""
"  // check if user has been selected file and decoding audio is finished\n"
"  if (audio_future.valid() && audio_future.wait_for(0s) == std::future_status:"
":ready)\n"
"  {\n"
"    audio = audio_future.get();\n"
"  }\n"
"```"
msgstr ""

msgid "### File Save Dialog"
msgstr ""

msgid ""
"`s3d::Dialog::Save` will always return \"/dev/save\" pseudo device,\n"
"which means that you cannot query users which file format they want to downloa"
"d."
msgstr ""

msgid "### Clipboard"
msgstr ""

msgid ""
"Only test copying and pasting are supported.\n"
"(and in FireFox, this feature is disallowed.)"
msgstr ""

msgid ""
"Use `s3d::Platforms::Web::Clipboard::GetText` that returns `std::future<String"
">`.\n"
"(You can use `s3d::Clipboard::SetText` in ordinal way.)"
msgstr ""

msgid ""
"```cpp\n"
"  // \n"
"  // Not supported in Web.\n"
"  //\n"
"  // String text;\n"
"  // \n"
"  // if (Clibboard::GetText(text))\n"
"  // {\n"
"  //\n"
"  // }\n"
"  future<String> text_future;\n"
"  String text;"
msgstr ""

msgid "  text_future = Platforms::Web::Clipboard::GetText();"
msgstr ""

msgid ""
"  // check if text has been pasted from clipboard\n"
"  if (text_future.valid() && text_future.wait_for(0s) == std::future_status::r"
"eady)\n"
"  {\n"
"    text = text_future.get();\n"
"  }\n"
"```"
msgstr ""
